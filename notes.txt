- Spring boot helps in building prod ready apps quickly using

build quickly
-------------
spring initialzr - creation of proj
spring boot starter projects - quickly define dependencies for the proj
spring boot auto configuration - automatically provide configuration based on dependencies in class path
spring dev tools - application changes without manually restart the server

production ready
-----------------
logging
configurations for envs - profiles, configuration properties
monitoring (spring boot actuator)

spring boot starter projects
-----------------------------
- convenient dependency descriptors for different features
All dependencies needed for building REST api and writing tests - spring-boot-starter-web, spring-boot-starter-test build dependencies
- spring boot provides variety of starter projects
    - eg. to talk to db using JPA - spring boot starter data JPA
    - to talk to db using JDBC - spring boot starter JDBC
    - secure the web application of REST api - spring boot starter security

spring boot auto configuration
-------------------------------
- Automated configuration for the app
- decided based on
    which frameworks are in the classpath
    existing configurations (annotations, etc)
- default configurations available in spring boot autoconfiguration jar

spring boot dev tools
---------------------
increase dev productivity
no restart for code change


Prod readiness
---------------
Managing app configs using profiles
- environment specific configs using profiles
- if no profiles configured, default configs from application.properties is used


Spring boot embedded servers
-----------------------------
spring boot starter web - contains the web server dependency tomcat because of which we can directly run the jar file using java. no need to separately download web server and stert it.

Monitor apps using spring boot actuator
---------------------------------------
- monitor and manage app in prod
- provides a number of endpoints
    beans - list of spring beans in app
    health - app health info
    metrics - app metrics
    mappings - details of request mappings


Spring framework vs Spring MVC vs Spring boot
-----------------------------------------------
framework - DI - @component, @autowiring, @componentScan etc
MVC - simplify building web applications/ REST api
    @controller, @requestmapping, @restcontroller etc
boot - build prod ready apps quickly
      starter projects, auto configuration, enable NFRs (actuator, embedded server, logging, error handling, profiles, configuration properties)

Spring MVC Front controller - Dispatcher Servlet
----------------------------
When a request is made,

- Identifies correct controller method
- Executes controller method
- Identifies correct view - Using view resolver
- Executes view


Request vs Model vs Session
-----------------------------
Scope of values added in Model is within that request.
To get a value across the request, use @SessionAttribute annotation

Bootstrap and jquery files
---------------------------
update the web jar dependencies and get the js and css links from the jars

/META-INF/resources/webjars/bootstrap/5.2.3/css/bootstrap.min.css
/META-INF/resources/webjars/bootstrap/5.2.3/js/bootstrap.min.js
/META-INF/resources/webjars/jquery/3.6.3/jquery.min.js

Validations with spring boot
-------------------------------
steps:
- Spring boot starter validation - dependency
- Command Bean (Form backing object)
    - 2 way binding (jsp & controller)
- Add validations to bean
- Display validation errors in the view

Spring security
----------------
Very useful for authentication, login, logout
All urls are protected
A login form is showed for unauthorized requests
To access h2 console, need to disable Cross Site Request Forgery, allow Frames


H2
---
- Got the H2 in memory db connection string from the logs -> Added connection conn0: url=jdbc:h2:mem:ee8baa6b-6325-4972-b636-2b7e1b81a5fe user=SA
- h2 console available in -> localhost:port/h2-console
- h2 console was not opening when spring security related code was present. It was loading after the security related code and dependency was removed.

Spring JDBC
------------
- jdbc - lot of sql queries and lot of java code
- spring jdbc - lot of sql queries but lesser java code
- jpa - just map entity to table
- spring data jpa - make jpa even more simple

Hibernate vs JPA
-----------------
- JPA defines the specifications. It is an API
- Hibernate is an implementation of JPA

- A repository allows perform operations on entities


REST
------
Representational State Transfer - Architectural style for web
Key abstraction - Resource
Resource has a URI
Can perform actions on the resources - get, add, updte, delete

jackson is used internally by spring boot starter web for mapping bean to json

path variable/params
- url can have some values as part of it - path variables/param

PUT - update an existing resource
PATCH - update part of a resource

Response status for REST api
return correct status for api
- 404 - resource not found
- 500 - server exception
- 400 - bad request validation error
- 401 - unauthorized request
- 200 - success
- 201 - Created - used in POST
- 204 - No content - successfully updated

Talend api tester - web app to test apis. Similar to postman.

POST - best practise is to return the created resource location url in the location header with status code 201

Integration tests and unit tests
---------------------------------
Integration test
- launch the entire spring context and fire request and check the api response
- the spring context is loaded in test by using the annotation - @SpringBootTest

json assert - used to compare json strings

order of test execution is random. Need to make sure one test run does not affect other test.


